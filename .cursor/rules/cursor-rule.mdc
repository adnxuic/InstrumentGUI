---
alwaysApply: true
---

# Instrument数据读取与控制GUI项目规则

## 项目概述
这是一个将多种仪表（SR830，WF1947）的数据读取和控制，对PPMS的数据进行读取的一体化GUI，
可实现仪表数据实时显示、数据长时间记录，扫频和频率共振追踪等功能。


## 技术栈和依赖

### 主要技术栈
- **仪表数据读取**: PyViSa
- **PPMS数据读取**: MultiPyVu(!对PPMS只读取数据，不控制)
- **GUI框架**: PySide6 (Qt for Python)
- **数据可视化**: matplotlib
- **数值计算**: numpy 
- **数据处理**: pandas 

### 开发规范

#### Python代码规范
- 使用PEP 8代码风格
- 类名使用PascalCase
- 函数和变量名使用snake_case
- 常量使用UPPER_CASE


#### GUI开发规范
- 使用PySide6的信号槽机制进行组件通信
- 使用QThread处理耗时操作，避免界面冻结
- 保持模块化设计：GUI组件与业务逻辑分离
- 使用面向对象编程：每个功能模块都应该有清晰的类结构
- 遵循单一职责原则：每个类和函数只负责一个特定功能

## 开发指导

### 新功能开发
1. 在`src/instrument/`中添加核心连通外接设备的类
2. 在`src/gui/`中创建对应的界面组件
3. 在[main.py](mdc:main.py)中集成新功能

### 数据可视化
- 提供实时数据更新功能

### 数据处理
- 提供数据长时间记录功能，每次记录都自动保存数据

## 常见任务

### 改进可视化效果
1. 扩展matplotlib图表类型
2. 添加交互式图表功能
3. 优化图表性能和美观度

### 优化用户体验
1. 改进界面布局和设计
2. 添加快捷键和工具提示
3. 实现数据导入导出功能

### 错误处理和日志
1. 为仪表连接和数据读取实现适当的错误处理
2. 使用 Python 的 logging 模块进行调试和错误报告
3. 在 GUI 中提供用户友好的错误消息